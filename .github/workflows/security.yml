name: Security Scanning

on:
  push:
    branches: [ master, main, beta ]
  pull_request:
    branches: [ master, main, beta ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  vulnerability-scan:
    name: Vulnerability Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.4'
        
    - name: Verify dependencies
      run: go mod verify
      
    - name: Run govulncheck
      uses: golang/govulncheck-action@v1
      with:
        go-version-input: '1.24.4'
        go-package: ./...
        
    - name: Install gosec
      run: go install github.com/securego/gosec/v2/cmd/gosec@latest
      
    - name: Run gosec security scanner
      run: |
        gosec -fmt sarif -out gosec-results.sarif ./... || echo "gosec failed but continuing"
        ls -la gosec-results.sarif || echo "SARIF file not found"
      continue-on-error: true
      
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec-results.sarif
      if: always() && hashFiles('gosec-results.sarif') != ''
      
    - name: Run gosec with detailed output
      run: |
        gosec -fmt=json -out=gosec-report.json -stdout -verbose=text ./... || echo "gosec detailed scan failed but continuing"
        ls -la gosec-report.json || echo "JSON report file not found"
      continue-on-error: true
      
    - name: Upload gosec report
      uses: actions/upload-artifact@v4
      with:
        name: gosec-report
        path: gosec-report.json
      if: always() && hashFiles('gosec-report.json') != ''

  dependency-check:
    name: Dependency Vulnerability Check  
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.4'
        
    - name: Install nancy
      run: go install github.com/sonatypecommunity/nancy@latest
      
    - name: Generate dependency list
      run: go list -json -deps ./... | nancy sleuth
      
    - name: Install cyclonedx-gomod
      run: go install github.com/CycloneDX/cyclonedx-gomod/cmd/cyclonedx-gomod@latest
      
    - name: Generate SBOM
      run: cyclonedx-gomod mod -output sbom.json -json
      
    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: sbom
        path: sbom.json

  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.4'
        
    - name: Install go-licenses
      run: go install github.com/google/go-licenses@latest
      
    - name: Check licenses
      run: go-licenses report ./... --template=licenses.tpl > license-report.txt
      continue-on-error: true
      
    - name: Upload license report
      uses: actions/upload-artifact@v4
      with:
        name: license-report
        path: license-report.txt
      if: always()
      
    - name: Check for forbidden licenses
      run: |
        # Define forbidden licenses (GPL variants that require source disclosure)
        FORBIDDEN="GPL-2.0,GPL-3.0,LGPL-2.1,LGPL-3.0,AGPL-3.0"
        
        # Check if any forbidden licenses are found
        if go-licenses csv ./... | grep -iE "(GPL|LGPL|AGPL)"; then
          echo "❌ Forbidden copyleft licenses detected!"
          echo "The following licenses may require source code disclosure:"
          go-licenses csv ./... | grep -iE "(GPL|LGPL|AGPL)"
          exit 1
        else
          echo "✅ No forbidden licenses detected"
        fi

  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.4'
        
    - name: Install staticcheck
      run: go install honnef.co/go/tools/cmd/staticcheck@latest
      
    - name: Run staticcheck
      run: staticcheck ./...
      
    - name: Install golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest
        args: --timeout=5m
        
    - name: Run go vet
      run: go vet ./...
      
    - name: Check for hardcoded secrets
      run: |
        # Simple regex-based secret detection
        echo "Checking for potential hardcoded secrets..."
        
        # Check for common secret patterns
        if grep -r -i -E "(password|passwd|pwd)\s*[:=]\s*[\"'][^\"']{8,}" . --exclude-dir=.git --exclude="*.yml" --exclude="*.yaml"; then
          echo "❌ Potential hardcoded passwords found!"
          exit 1
        fi
        
        if grep -r -i -E "(api[_-]?key|apikey)\s*[:=]\s*[\"'][^\"']{16,}" . --exclude-dir=.git --exclude="*.yml" --exclude="*.yaml"; then
          echo "❌ Potential hardcoded API keys found!"
          exit 1
        fi
        
        if grep -r -i -E "(secret|token)\s*[:=]\s*[\"'][^\"']{16,}" . --exclude-dir=.git --exclude="*.yml" --exclude="*.yaml" --exclude="*.env.example"; then
          echo "❌ Potential hardcoded secrets/tokens found!"
          exit 1
        fi
        
        echo "✅ No obvious hardcoded secrets detected"

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [vulnerability-scan, dependency-check, license-check, code-quality]
    if: always()
    
    steps:
    - name: Security scan summary
      run: |
        echo "## 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Vulnerability Scan | ${{ needs.vulnerability-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Dependency Check | ${{ needs.dependency-check.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| License Check | ${{ needs.license-check.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.code-quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Scan completed on: $(date)" >> $GITHUB_STEP_SUMMARY